// store.js
import { db, ts } from "./firebase.js";
import {
  addDoc,
  collection,
  doc,
  getDoc,
  getDocs,
  onSnapshot,
  orderBy,
  query,
  serverTimestamp,
  setDoc,
  updateDoc,
  where,
  limit,
  increment
} from "https://www.gstatic.com/firebasejs/12.1.0/firebase-firestore.js";

// 1) ‡¶è‡¶á ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ UI-‡¶è ‡¶¨‡¶æ‡¶ü‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
export const REACTIONS = ["üòÅ", "üòÇ", "üòÖ", "üòç", "üò•", "üòí", "üòî", "üò≠"];

// 2) ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
export async function addMessage(userId, text) {
  await addDoc(collection(db, "messages"), {
    userId,
    text,
    createdAt: ts(),
    reactions: {}
  });
}

// 3) ‡¶∞‡¶ø‡ßü‡ßá‡¶≤‡¶ü‡¶æ‡¶á‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ø‡¶∏‡ßá‡¶® ‡¶ï‡¶∞‡¶æ
export function listenMessages(callback) {
  const q = query(
    collection(db, "messages"),
    orderBy("createdAt", "asc"),
    limit(50)
  );
  return onSnapshot(q, callback);
}

// 4) ‡¶è‡¶ï‡¶ü‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶â‡¶™‡¶∞ ‡¶∞‡¶ø‡ßü‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶¨‡¶æ‡ßú‡¶æ‡¶®‡ßã
export async function addReaction(messageId, emoji) {
  const msgRef = doc(db, "messages", messageId);
  await updateDoc(msgRef, {
    [`reactions.${emoji}`]: increment(1)
  });
}

// 5) ‡¶∏‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶≤ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ
export async function getMessage(messageId) {
  const ref = doc(db, "messages", messageId);
  const snap = await getDoc(ref);
  if (snap.exists()) {
    return { id: snap.id, ...snap.data() };
  } else {
    throw new Error("Message not found");
  }
}

// 6) ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶®‡ßç‡¶°‡¶ø‡¶∂‡¶® ‡¶¶‡¶ø‡ßü‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶´‡ßá‡¶ö
export async function queryMessages(field, op, value) {
  const q = query(
    collection(db, "messages"),
    where(field, op, value)
  );
  const snap = await getDocs(q);
  return snap.docs.map(d => ({ id: d.id, ...d.data() }));
}

/* ---------------------------------------
   ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂ ui.js ‡¶è‡¶∞ missing exports ‡¶™‡ßÇ‡¶∞‡¶£ ‡¶ï‡¶∞‡¶õ‡ßá
--------------------------------------- */

// ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü ‡¶∞‡¶ø‡ßü‡ßá‡¶≤‡¶ü‡¶æ‡¶á‡¶Æ
export function listUsersRealtime(callback) {
  const q = query(collection(db, "users"), orderBy("displayName", "asc"));
  return onSnapshot(q, snap => {
    const users = snap.docs.map(d => ({ uid: d.id, ...d.data() }));
    callback(users);
  });
}

// Conversation ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶¨‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
export async function getOrCreateConversation(peerUid) {
  const me = firebase.auth().currentUser?.uid;
  if (!me) throw new Error("Not logged in");

  const convQuery = query(
    collection(db, "conversations"),
    where("members", "in", [[me, peerUid], [peerUid, me]]),
    limit(1)
  );
  const snap = await getDocs(convQuery);
  if (!snap.empty) return snap.docs[0].id;

  const docRef = await addDoc(collection(db, "conversations"), {
    members: [me, peerUid],
    createdAt: serverTimestamp()
  });
  return docRef.id;
}

// ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Æ
export function streamMessages(convId, callback) {
  const msgsRef = collection(db, "conversations", convId, "messages");
  const q = query(msgsRef, orderBy("createdAt", "asc"));
  return onSnapshot(q, snap => {
    const msgs = snap.docs.map(d => ({ id: d.id, ...d.data() }));
    callback(msgs);
  });
}

// ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
export async function sendMessage(convId, text, replyTo = null) {
  const me = firebase.auth().currentUser?.uid;
  if (!me) throw new Error("Not logged in");

  const msgData = {
    senderUid: me,
    text,
    createdAt: serverTimestamp(),
    reactions: {},
    replyTo: replyTo
      ? { id: replyTo.id, text: replyTo.text || "" }
      : null
  };

  await addDoc(collection(db, "conversations", convId, "messages"), msgData);
}

// ‡¶∞‡¶ø‡ßü‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶Ö‡¶®/‡¶Ö‡¶´
export async function toggleReaction(convId, msgId, emoji, userId) {
  const msgRef = doc(db, "conversations", convId, "messages", msgId);
  const snap = await getDoc(msgRef);
  if (!snap.exists()) return;

  const data = snap.data();
  let reactions = data.reactions || {};
  let list = reactions[emoji] || [];

  if (list.includes(userId)) {
    list = list.filter(uid => uid !== userId);
  } else {
    list.push(userId);
  }
  reactions[emoji] = list;
  await updateDoc(msgRef, { reactions });
}

// ‡¶∞‡¶ø‡¶° ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï ‡¶ï‡¶∞‡¶æ
export async function markRead(convId) {
  const me = firebase.auth().currentUser?.uid;
  if (!me) throw new Error("Not logged in");
  const convRef = doc(db, "conversations", convId);
  await updateDoc(convRef, { [`read.${me}`]: serverTimestamp() });
}

// ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶´‡ßá‡¶ö ‡¶ï‡¶∞‡¶æ
export async function getUser(uid) {
  const userRef = doc(db, "users", uid);
  const snap = await getDoc(userRef);
  return snap.exists() ? { uid: snap.id, ...snap.data() } : null;
}
